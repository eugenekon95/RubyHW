p "Дано целое число. Найти сумму его цифр."
p "number = 123"

def sumOfDigits(number = 123)
    sum = 0
    while number > 0
        digit = number % 10
        sum += digit
        number /= 10
    end
    return sum
end

p "Sum of digits = #{sumOfDigits()}"
p "---------------------------------------------------------------------------"

p "Дано целое число. Найти произвидение его цифр."
p "number = 456"

def mulOfDigits(number = 456)
    mul = 1
    while number > 0
        digit = number % 10
        mul *= digit
        number /= 10
    end
    return mul
end

p "Multiplication of digits = #{mulOfDigits()}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Упорядочить его по возрастанию."
p "array = [3,6,9,1,8,2,4,5,7,0].sort"

array = [3,6,9,1,8,2,4,5,7,0]

p "Ascending sorted array = #{array.sort}"

p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Упорядочить его по убыванию."
p "array = [3,6,9,1,8,2,4,5,7,0].sort"

array = [3,6,9,1,8,2,4,5,7,0]

p "Descending sorted array = #{array.sort { |a, b| b <=> a }}"

p "---------------------------------------------------------------------------"


p "Дан целочисленный массив. Необходимо вывести вначале его элементы с четными индексами, а затем - с нечетными."
p "arr = [0, 1, 2, 3, 4, 5, 6]"

arr = [0, 1, 2, 3, 4, 5, 6]
 
res = arr.group_by.with_index do |el, i|
  i.odd? ? :odd_index : :even_index
end
 
p "Elements with even indexes: #{res[:even_index].join(', ')}."
p "Elements with odd indexes:  #{res[:odd_index].join(', ')}."
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Необходимо вывести вначале его элементы с нечётными индексами, а затем - с чётными."
p "arr = [0, 1, 2, 3, 4, 5, 6]"

arr = [0, 1, 2, 3, 4, 5, 6]
 
res = arr.group_by.with_index do |el, i|
  i.odd? ? :odd_index : :even_index
end

p "Elements with odd indexes:  #{res[:odd_index].join(', ')}."
p "Elements with even indexes: #{res[:even_index].join(', ')}."

p "---------------------------------------------------------------------------"

 
p "Дано натуральное число N. Найти результат следующего произведения 1*2*…*N."
p "n = 5"

def factorial(n=5)
    if n == 0
        1
    else
        n * factorial(n-1)
    end
end

p "N Factorial = #{factorial}"
p "---------------------------------------------------------------------------"


p "Дан целочисленный массив. Найти максимальный нечетный элемент."
p "arr = [1, 2, 3, 4, 5, 6, 7, 8]"

arr = [1, 2, 3, 4, 5, 6, 7, 8]

p "Max odd element = #{arr.select{ |i| i.odd? }.max}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти максимальный чётный элемент."
p "arr = [1, 2, 3, 4, 5, 6, 7, 8]"

arr = [1, 2, 3, 4, 5, 6, 7, 8]

p "Max even element = #{arr.select{ |i| i.even? }.max}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти минимальный нечетный элемент."
p "arr = [1, 2, 3, 4, 5, 6, 7, 8]"

arr = [1, 2, 3, 4, 5, 6, 7, 8]

p "Min odd element = #{arr.select{ |i| i.odd? }.min}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти минимальный чётный элемент."
p "arr = [1, 2, 3, 4, 5, 6, 7, 8]"

arr = [1, 2, 3, 4, 5, 6, 7, 8]

p "Min even element = #{arr.select{ |i| i.even? }.min}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти индекс максимального элемента."
p "arr = [1, 2, 3, 4, 5, 6, 7, 8]"

arr = [1, 2, 3, 4, 5, 6, 7, 8]
maxElem = arr.max
maxIndex=arr.index(maxElem)


p "Max element index = #{maxIndex}"
p "---------------------------------------------------------------------------"


p "Дан целочисленный массив. Найти индекс минимального элемента."
p "arr = [1, 2, 3, 4, 5, 6, 7, 8]"

arr = [1, 2, 3, 4, 5, 6, 7, 8]
minElem = arr.min
minIndex=arr.index(minElem)


p "Max element index = #{minIndex}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Необходимо найти количество минимальных элементов."
p "arr = [1, 1, 1, 11, 7, 9]"

arr = [1, 1, 1, 11, 7, 9]
p "Quantity of minimal elements = #{arr.count{ |i| i == arr.min }}"

p "Дан целочисленный массив. Необходимо найти количество максимальных элементов."
p "arr = [1, 1, 1, 11, 7, 9]"
"---------------------------------------------------------------------------"

arr = [1, 1, 1, 11, 7, 9]
p "Quantity of maximum elements = #{arr.count{ |i| i == arr.max }}"
"---------------------------------------------------------------------------"



