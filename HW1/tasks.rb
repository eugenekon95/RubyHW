p "Дано целое число. Найти сумму его цифр."
p "number = 123"

def sumOfDigits(number = 123)
    sum = 0
    while number > 0
        digit = number % 10
        sum += digit
        number /= 10
    end
    return sum
end

p "Sum of digits = #{sumOfDigits()}"
p "---------------------------------------------------------------------------"

p "Дано целое число. Найти произвидение его цифр."
p "number = 456"

def mulOfDigits(number = 456)
    mul = 1
    while number > 0
        digit = number % 10
        mul *= digit
        number /= 10
    end
    return mul
end

p "Multiplication of digits = #{mulOfDigits()}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Упорядочить его по возрастанию."
p "array = [3,6,9,1,8,2,4,5,7,0].sort"

array = [3,6,9,1,8,2,4,5,7,0]

p "Ascending sorted array = #{array.sort}"

p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Упорядочить его по убыванию."
p "array = [3,6,9,1,8,2,4,5,7,0].sort"

array = [3,6,9,1,8,2,4,5,7,0]

p "Descending sorted array = #{array.sort { |a, b| b <=> a }}"

p "---------------------------------------------------------------------------"


p "Дан целочисленный массив. Необходимо вывести вначале его элементы с четными индексами, а затем - с нечетными."
p "arr = [0, 1, 2, 3, 4, 5, 6]"

arr = [0, 1, 2, 3, 4, 5, 6]
 
res = arr.group_by.with_index do |el, i|
  i.odd? ? :odd_index : :even_index
end
 
p "Elements with even indexes: #{res[:even_index].join(', ')}."
p "Elements with odd indexes:  #{res[:odd_index].join(', ')}."
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Необходимо вывести вначале его элементы с нечётными индексами, а затем - с чётными."
p "arr = [0, 1, 2, 3, 4, 5, 6]"

arr = [0, 1, 2, 3, 4, 5, 6]
 
res = arr.group_by.with_index do |el, i|
  i.odd? ? :odd_index : :even_index
end

p "Elements with odd indexes:  #{res[:odd_index].join(', ')}."
p "Elements with even indexes: #{res[:even_index].join(', ')}."

p "---------------------------------------------------------------------------"

 
p "Дано натуральное число N. Найти результат следующего произведения 1*2*…*N."
p "n = 5"

def factorial(n=5)
    if n == 0
        1
    else
        n * factorial(n-1)
    end
end

p "N Factorial = #{factorial}"
p "---------------------------------------------------------------------------"


p "Дан целочисленный массив. Найти максимальный нечетный элемент."
p "arr = [1, 2, 3, 4, 5, 6, 7, 8]"

arr = [1, 2, 3, 4, 5, 6, 7, 8]

p "Max odd element = #{arr.select{ |i| i.odd? }.max}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти максимальный чётный элемент."
p "arr = [1, 2, 3, 4, 5, 6, 7, 8]"

arr = [1, 2, 3, 4, 5, 6, 7, 8]

p "Max even element = #{arr.select{ |i| i.even? }.max}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти минимальный нечетный элемент."
p "arr = [1, 2, 3, 4, 5, 6, 7, 8]"

arr = [1, 2, 3, 4, 5, 6, 7, 8]

p "Min odd element = #{arr.select{ |i| i.odd? }.min}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти минимальный чётный элемент."
p "arr = [1, 2, 3, 4, 5, 6, 7, 8]"

arr = [1, 2, 3, 4, 5, 6, 7, 8]

p "Min even element = #{arr.select{ |i| i.even? }.min}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти индекс максимального элемента."
p "arr = [1, 2, 3, 4, 5, 6, 7, 8]"

arr = [1, 2, 3, 4, 5, 6, 7, 8]
maxElem = arr.max
maxIndex=arr.index(maxElem)

p "Max element index = #{maxIndex}"
p "---------------------------------------------------------------------------"


p "Дан целочисленный массив. Найти индекс минимального элемента."
p "arr = [1, 2, 3, 4, 5, 6, 7, 8]"

arr = [1, 2, 3, 4, 5, 6, 7, 8]
minElem = arr.min
minIndex=arr.index(minElem)


p "Max element index = #{minIndex}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Необходимо найти количество минимальных элементов."
p "arr = [1, 1, 1, 11, 7, 9]"

arr = [1, 1, 1, 11, 7, 9]
p "Quantity of minimal elements = #{arr.count{ |i| i == arr.min }}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Необходимо найти количество максимальных элементов."
p "arr = [1, 1, 1, 11, 7, 9]"

arr = [1, 1, 1, 11, 7, 9]

p "Quantity of maximum elements = #{arr.count{ |i| i == arr.max }}"

p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Заменить все положительные элементы на значение минимального."
p "arr = [0, -1, 2, -5, 4]"

arr = [0, -1, 2, -5, 4]
min = arr.min
arr.map! { |e| e > 0 ? min : e }

p "Change all positive elements on min array element = #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Заменить все положительные элементы на значение максимального."

p "arr = [0, -1, 2, -5, 4]"

arr = [0, -1, 2, -5, 4]
min = arr.max
arr.map! { |e| e > 0 ? min : e }

p "Change all positive elements on max array element = #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Заменить все отрицательные элементы на значение минимального."
p "arr = [-3, -1, 2, -5, 4]"

arr = [-3, -1, 2, -5, 4]
min = arr.min
arr.map! { |e| e < 0 ? min : e }

p "Change all negative elements on min array element = #{arr}"
p "---------------------------------------------------------------------------"


p "Дан целочисленный массив. Заменить все отрицательные элементы на значение максимального."
p "arr = [-3, -1, 2, -5, 4]"

arr = [-3, -1, 2, -5, 4]
min = arr.max
arr.map! { |e| e < 0 ? min : e }

p "Change all negative elements on min array element = #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Вывести номер первого из тех его элементов,
   которые удовлетворяют двойному неравенству:
   A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ]."

p  "arr = [1, 5, 2, 3, 4]"

arr = [-3, -1, 2, -5, 4]
p "Element number = #{arr.index(arr.select { |num| arr[0] < num && num < arr[-1] }.first) || []}"

p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Вывести номер последнего из тех его элементов,
   которые удовлетворяют двойному неравенству:
   A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ]."

p  "arr = [1, 5, 2, 3, 4]"

arr = [-3, -1, 2, -5, 4]
p "Element number  = #{arr.index(arr.select { |num| arr[0] < num && num < arr[-1] }.last) || []}"

p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Осуществить циклический сдвиг элементов массива влево на одну позицию."
p "arr = [1, 5, 7, 9]"

arr = [1, 5, 7, 9].rotate()

p "Left shifted array = #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Осуществить циклический сдвиг элементов массива вправо на одну позицию."
p "arr = [1, 5, 7, 9]"

arr = [1, 5, 7, 9].rotate(-1)

p "Right shifted array = #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Преобразовать его, вставив перед каждым положительным элементом нулевой элемент."
p "nums = [1, 4, -9, 8, -7, 3, 6]"

nums = [1, 4, -9, 8, -7, 3, 6]
zeroElem=nums.first
arr=[]
nums.each do |num|
    if num>0
      arr.push(zeroElem)
      arr.push(num)
    else
        arr.push(num)
      
        end
    end
p "modified array =#{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Преобразовать его, вставив перед каждым отрицательным элементом нулевой элемент."
p "nums = [1, 4, -9, 8, -7, 3, 6]"

nums = [1, 4, -9, 8, -7, 3, 6]
zeroElem=nums.first
arr=[]
nums.each do |num|
    if num<0
      arr.push(zeroElem)
      arr.push(num)
    else
        arr.push(num)
      
        end
    end
p "modified array =#{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Преобразовать его, вставив после каждого положительного элемента нулевой элемент."
p "nums = [1, 4, -9, 8, -7, 3, 6]"

nums = [1, 4, -9, 8, -7, 3, 6]
zeroElem=nums.first
arr=[]
nums.each do |num|
    if num>0
      arr.push(num)
      arr.push(zeroElem)
      
    else
        arr.push(num)
      
        end
    end
p "modified array =#{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Преобразовать его, вставив после каждого отрицательного элемента нулевой элемент."
p "nums = [1, 4, -9, 8, -7, 3, 6]"

nums = [1, 4,-9, 8, -7, 3, 6]
zeroElem=nums.first
arr=[]
nums.each do |num|
    if num<0
      arr.push(num)
      arr.push(zeroElem)
      
    else
        arr.push(num)
      
        end
    end
p "modified array =#{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Вывести вначале все его четные элементы, а затем - нечетные"
p "arr = [1, 4, -9, 8, -7, 3, 6]"
 
arr = [1, 4, -9, 8, -7, 3, 6].sort.partition(&:even?).inject(:concat)
p "modified array #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Вывести вначале все его нечетные элементы, а затем - четные"
p "arr = [1, 4, -9, 8, -7, 3, 6]"
 
arr = [1, 4, -9, 8, -7, 3, 6].sort.partition(&:odd?).inject(:concat)
p "modified array #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти количество минимальных элементов."
p "arr = [1, 4, -9, 8, 8, 3, 8]"
arr = [1, 4, -9, 8, 8, 3, 8]
min_elements_count = arr.count(arr.min)
p "min elements count = #{min_elements_count}"
p "---------------------------------------------------------------------------"


p "Дан целочисленный массив. Найти количество максимальных элементов."
p "arr = [1, 4, -9, 8, 8, 3, 8]"
arr = [1, 4, -9, 8, 8, 3, 8]
max_elements_count = arr.count(arr.max)
p "max elements count = #{max_elements_count}"
p "---------------------------------------------------------------------------"

 p "Дан целочисленный массив. Найти минимальный четный элемент."
 p "arr = [1, 4, -9, 8, -7, 3, 6]"

 arr = [1, 4, -9, 8, -7, 3, 6]
 p "Min even element = #{arr.select{|i| i.even?}.min}"
 
 p "---------------------------------------------------------------------------"

 p "Дан целочисленный массив. Найти минимальный нечетный элемент."
 p "arr = [1, 4, -9, 8, -7, 3, 6]"

 arr = [1, 4, -9, 8, -7, 3, 6]
 p "Min odd element = #{arr.select{|i| i.odd?}.min}"
 
 p "---------------------------------------------------------------------------"

 p "Дан целочисленный массив. Найти максимальный четный элемент."
 p "arr = [1, 4, -9, 8, -7, 3, 6]"

 arr = [1, 4, -9, 8, -7, 3, 6]
 p "Max even element = #{arr.select{|i| i.even?}.max}"
 
 p "---------------------------------------------------------------------------"

 p "Дан целочисленный массив. Найти максимальный нечетный элемент."
 p "arr = [1, 4, -9, 8, -7, 3, 6]"

 arr = [1, 4, -9, 8, -7, 3, 6]
 p "Max odd element = #{arr.select{|i| i.odd?}.max}"
 
 p "---------------------------------------------------------------------------"
 
 p "Дан целочисленный массив. Найти максимальный четный элемент."
 p "arr = [1, 4, -9, 8, -7, 3, 6]"

 arr = [1, 4, -9, 8, -7, 3, 6]
 p "Max even element = #{arr.select{|i| i.even?}.max}"
 
 p "---------------------------------------------------------------------------"

 p "Дан целочисленный массив. Найти минимальный положительный элемент."
 p "arr = [1, 4, -9, 8, -7, 3, 6]"

 arr = [1, 4, -9, 8, -7, 3, 6]
 p "Min positive element = #{arr.select{|i| i>0}.min}"
 
 p "---------------------------------------------------------------------------"

 p "Дан целочисленный массив. Найти максимальный отрицательный элемент."
 p "arr = [1, 4, -9, 8, -7, 3, 6]"

 arr = [1, 4, -9, 8, -7, 3, 6]
 p "Max negative element = #{arr.select{|i| i<0}.max}"
 
 p "---------------------------------------------------------------------------"

 p "Дан целочисленный массив. Найти все чётные элементы."
 p "arr = [1, 4, -9, 8, -7, 3, 6]"

 arr = [1, 4, -9, 8, -7, 3, 6]
 p "All evens = #{arr.select{|i| i.even?}}"
 
 p "---------------------------------------------------------------------------"

 p "Дан целочисленный массив. Найти все чётные элементы."
 p "arr = [1, 4, -9, 8, -7, 3, 6]"

 arr = [1, 4, -9, 8, -7, 3, 6]
 p "All odds = #{arr.select{|i| i.odd?}}"
 
 p "---------------------------------------------------------------------------"

 "Дан целочисленный массив. Найти количество чётных элементов."
 p "arr = [1, 4, -9, 8, -7, 3, 6]"

 arr = [1, 4, -9, 8, -7, 3, 6]
 p "Evens count = #{arr.select{|i| i.even?}.count}"
 
 p "---------------------------------------------------------------------------"

 "Дан целочисленный массив. Найти количество нечётных элементов."
 p "arr = [1, 4, -9, 8, -7, 3, 6]"

 arr = [1, 4, -9, 8, -7, 3, 6]
 p "Odds count = #{arr.select{|i| i.odd?}.count}"
 
 p "---------------------------------------------------------------------------"


 



