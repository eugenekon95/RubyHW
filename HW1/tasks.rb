p "Дано целое число. Найти сумму его цифр."
p number = 123

def sumOfDigits(number = 123)
    sum = 0
    while number > 0
        digit = number % 10
        sum += digit
        number /= 10
    end
    return sum
end

p "Sum of digits = #{sumOfDigits()}"
p "---------------------------------------------------------------------------" 

p "Дано целое число. Найти произвидение его цифр."
p number = 456

def mulOfDigits(number = 456)
    mul = 1
    while number > 0
        digit = number % 10
        mul *= digit
        number /= 10
    end
    return mul
end

p "Multiplication of digits = #{mulOfDigits()}"
p "---------------------------------------------------------------------------" 

p "Дан целочисленный массив. Упорядочить его по возрастанию."

p  arr = Array.new(10) { rand(-100...100) }

p"Ascending sorted array = #{arr.sort}"

p "---------------------------------------------------------------------------" 

p "Дан целочисленный массив. Упорядочить его по убыванию."
p  arr = Array.new(10) { rand(-100...100) }

p "Descending sorted array = #{arr.sort { |a, b| b <=> a }}"

p "---------------------------------------------------------------------------" 

p "Дан целочисленный массив. Необходимо вывести вначале его элементы с четными индексами, а затем - с нечетными."
p  arr = Array.new(10) { rand(-100...100) }

res = arr.group_by.with_index do |el, i|
  i.odd? ? :odd_index : :even_index
end
 
p "Elements with even indexes: #{res[:even_index].join(', ')}."
p "Elements with odd indexes:  #{res[:odd_index].join(', ')}."
p "---------------------------------------------------------------------------" 

p "Дан целочисленный массив. Необходимо вывести вначале его элементы с нечётными индексами, а затем - с чётными."
p  arr = Array.new(10) { rand(-100...100) }

res = arr.group_by.with_index do |el, i|
  i.odd? ? :odd_index : :even_index
end

p "Elements with odd indexes:  #{res[:odd_index].join(', ')}."
p "Elements with even indexes: #{res[:even_index].join(', ')}."

p "---------------------------------------------------------------------------"

 
p "Дано натуральное число N. Найти результат следующего произведения 1*2*…*N."
p "n = 5"

def factorial(n=5)
    if n == 0
        1
    else
        n * factorial(n-1)
    end
end

p "N Factorial = #{factorial}"
p "---------------------------------------------------------------------------"


p "Дан целочисленный массив. Найти максимальный нечетный элемент."
p  arr = Array.new(10) { rand(-100...100) }

p "Max odd element = #{arr.select{ |i| i.odd? }.max}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти максимальный чётный элемент."
p  arr = Array.new(10) { rand(-100...100) }

p "Max even element = #{arr.select{ |i| i.even? }.max}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти минимальный нечетный элемент."
p  arr = Array.new(10) { rand(-100...100) }

p "Min odd element = #{arr.select{ |i| i.odd? }.min}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти минимальный чётный элемент."

p arr = Array.new(10) { rand(-100...100) } 

p "Min even element = #{arr.select{ |i| i.even? }.min}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти индекс максимального элемента."
p  arr = Array.new(10) { rand(-100...100) }

maxElem = arr.max
maxIndex=arr.index(maxElem)

p "Max element index = #{maxIndex}"
p "---------------------------------------------------------------------------"


p "Дан целочисленный массив. Найти индекс минимального элемента."
p arr = Array.new(10) { rand(-100...100) }

minElem = arr.min
minIndex=arr.index(minElem)


p "Max element index = #{minIndex}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Необходимо найти количество минимальных элементов."
p  arr = Array.new(10) { rand(-100...100) }

p "Quantity of minimal elements = #{arr.count{ |i| i == arr.min }}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Необходимо найти количество максимальных элементов."
p  arr = Array.new(10) { rand(-100...100) }

p "Quantity of maximum elements = #{arr.count{ |i| i == arr.max }}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Заменить все положительные элементы на значение минимального."
p  arr = Array.new(10) { rand(-100...100) }

min = arr.min
arr.map! { |e| e > 0 ? min : e }

p "Change all positive elements on min array element = #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Заменить все положительные элементы на значение максимального."
p arr = Array.new(10) { rand(-100...100) }

p arr = Array.new(10) { rand(-100...100) }
min = arr.max
arr.map! { |e| e > 0 ? min : e }

p "Change all positive elements on max array element = #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Заменить все отрицательные элементы на значение минимального."
p arr = Array.new(10) { rand(-100...100) }

min = arr.min
arr.map! { |e| e < 0 ? min : e }

p "Change all negative elements on min array element = #{arr}"
p "---------------------------------------------------------------------------"


p "Дан целочисленный массив. Заменить все отрицательные элементы на значение максимального."
p  arr = Array.new(10) { rand(-100...100) }

min = arr.max
arr.map! { |e| e < 0 ? min : e }

p "Change all negative elements on min array element = #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Вывести номер первого из тех его элементов,
   которые удовлетворяют двойному неравенству:
   A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ]."

p  arr = Array.new(10) { rand(-100...100) }

p "Element number = #{arr.index(arr.select { |num| arr[0] < num && num < arr[-1] }.first) || []}"

p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Вывести номер последнего из тех его элементов,
   которые удовлетворяют двойному неравенству:
   A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ]."

p arr = Array.new(10) { rand(-100...100) }

p "Element number  = #{arr.index(arr.select { |num| arr[0] < num && num < arr[-1] }.last) || []}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Осуществить циклический сдвиг элементов массива влево на одну позицию."
p  arr = Array.new(10) { rand(-100...100) }

p "Left shifted array = #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Осуществить циклический сдвиг элементов массива вправо на одну позицию."
p  arr = Array.new(10) { rand(-100...100) }

p "Right shifted array = #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Преобразовать его, вставив перед каждым положительным элементом нулевой элемент."

p nums = Array.new(10) { rand(-100...100) }
zeroElem=0
arr=[]
nums.each do |num|
    if num>0
      arr.push(zeroElem)
      arr.push(num)
    else
        arr.push(num)
      
        end
    end

p "modified array = #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Преобразовать его, вставив перед каждым отрицательным элементом нулевой элемент."

p nums = Array.new(10) { rand(-100...100) }
zeroElem=0
arr=[]
nums.each do |num|
    if num<0
      arr.push(zeroElem)
      arr.push(num)
    else
        arr.push(num)
      
        end
    end

p "modified array = #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Преобразовать его, вставив после каждого положительного элемента нулевой элемент."

p nums = Array.new(10) { rand(-100...100) }
zeroElem=0
arr=[]
nums.each do |num|
    if num>0
      arr.push(num)
      arr.push(zeroElem)
      
    else
        arr.push(num)
      
        end
    end

p "modified array = #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Преобразовать его, вставив после каждого отрицательного элемента нулевой элемент."

p  nums = Array.new(10) { rand(-100...100) }
zeroElem=nums.first
arr=[]
nums.each do |num|
    if num<0
      arr.push(num)
      arr.push(zeroElem)
      
    else
        arr.push(num)
      
        end
    end
p "modified array = #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Вывести вначале все его четные элементы, а затем - нечетные"

p arr = Array.new(10) { rand(-100...100) } 
arr.sort.partition(&:even?).inject(:concat)

p "modified array = #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Вывести вначале все его нечетные элементы, а затем - четные"
p arr = Array.new(10) { rand(-100...100) } 
 
arr.sort.partition(&:odd?).inject(:concat)

p "modified array = #{arr}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти количество минимальных элементов."

p arr = Array.new(10) { rand(-100...100) } 
min_elements_count = arr.count(arr.min)

p "min elements count = #{min_elements_count}"
p "---------------------------------------------------------------------------"


p "Дан целочисленный массив. Найти количество максимальных элементов."
p arr = Array.new(10) { rand(-100...100) } 

arr = [1, 4, -9, 8, 8, 3, 8]
max_elements_count = arr.count(arr.max)

p "max elements count = #{max_elements_count}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти минимальный четный элемент."

p arr = Array.new(10) { rand(-100...100) } 

p "Min even element = #{arr.select{|i| i.even?}.min}" 
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти минимальный нечетный элемент."

p arr = Array.new(10) { rand(-100...100) } 
arr = [1, 4, -9, 8, -7, 3, 6]

p "Min odd element = #{arr.select{|i| i.odd?}.min}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти максимальный четный элемент."
p arr = Array.new(10) { rand(-100...100) } 

p arr = Array.new(10) { rand(-100...100) } 
p "Max even element = #{arr.select{|i| i.even?}.max}"
 
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти максимальный нечетный элемент."
 
p arr = Array.new(10) { rand(-100...100) } 

p "Max odd element = #{arr.select{|i| i.odd?}.max}"
p "---------------------------------------------------------------------------"
 
p "Дан целочисленный массив. Найти максимальный четный элемент."

p arr = Array.new(10) { rand(-100...100) } 

p "Max even element = #{arr.select{|i| i.even?}.max}"
 
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти минимальный положительный элемент."
p arr = Array.new(10) { rand(-100...100) } 

p "Min positive element = #{arr.select{|i| i>0}.min}" 
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти максимальный отрицательный элемент."
p arr = Array.new(10) { rand(-100...100) } 

p "Max negative element = #{arr.select{|i| i<0}.max}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти все чётные элементы."
p arr = Array.new(10) { rand(-100...100) } 

p "All evens = #{arr.select{|i| i.even?}}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти все чётные элементы."
p arr = Array.new(10) { rand(-100...100) } 

p "All odds = #{arr.select{|i| i.odd?}}"
p "---------------------------------------------------------------------------"

"Дан целочисленный массив. Найти количество чётных элементов."
p arr = Array.new(10) { rand(-100...100) } 

p "Evens count = #{arr.select{|i| i.even?}.count}"
p "---------------------------------------------------------------------------"

"Дан целочисленный массив. Найти количество нечётных элементов."
p arr = Array.new(10) { rand(-100...100) } 

p "Odds count = #{arr.select{|i| i.odd?}.count}" 
p "---------------------------------------------------------------------------"


puts "Дан целочисленный массив. Найти cреднее арифметическое его элементов."
p arr = Array.new(10) { rand(-100...100) }

p "Avg = #{arr.sum / arr.count}" 
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти cреднее арифметическое  модулей его элементов."
p arr = Array.new(10) { rand(-100...100) }

p "Avg = #{(arr.inject(0){ |sum, i| sum + i.abs }.to_f) / arr.size}"

p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Найти cреднее арифметическое квадратов его элементов."
p  arr = Array.new(10) { rand(-100...100) }

p "Avg = #{(arr.inject(0){ |sum, i| sum + i.pow(2) }.to_f) / arr.size}"

p "---------------------------------------------------------------------------"
 
p "Дано число А и натуральное число N. Найти результат следующего выражения 1 + А + А*2 + А*3 + … + А*N."
p "A,N = 1,10"
a,n = 1,10

p "Result = #{(1..n).inject(1){ |s,i| s+a*i }}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив и число К. Вывести количество элементов, меньших К."
p arr = Array.new(10) { rand(-100...100) }
K=rand(10) 

p "Result = #{arr.select{|i| i<K}.count}"
p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Необходимо найти два наибольших элемента."
p  arr = Array.new(10) { rand(-100...100) }

p  "Result = #{arr.sort.uniq.last 2}"

p "---------------------------------------------------------------------------"

p "Дан целочисленный массив. Необходимо найти два наименьших элемента."
p  arr = Array.new(10) { rand(-100...100) }

p "Result = #{arr.sort.uniq.first 2}"

p "---------------------------------------------------------------------------" 
 
p "Дан целочисленный массив.
    Вывести индексы элементов, которые меньше своего левого соседа,
    и количество таких чисел."
  
p  arr = Array.new(10) { rand(-100...100) }
puts "Indexes"
p temp = (1...arr.size).select{ |x| arr[x] < arr[x-1] }

puts "number of elements = #{temp.size}"
p "---------------------------------------------------------------------------" 


    


 																								


 


 



